{"name":"Generic-worker","tagline":"A generic worker for task cluster, written in go","body":"# generic-worker\r\n<img src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n[![Build Status](https://travis-ci.org/taskcluster/generic-worker.svg?branch=master)](http://travis-ci.org/taskcluster/generic-worker)\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/generic-worker?status.svg)](https://godoc.org/github.com/taskcluster/generic-worker)\r\n[![Coverage Status](https://coveralls.io/repos/taskcluster/generic-worker/badge.svg?branch=master&service=github)](https://coveralls.io/github/taskcluster/generic-worker?branch=master)\r\n[![License](https://img.shields.io/badge/license-MPL%202.0-orange.svg)](http://mozilla.org/MPL/2.0)\r\n\r\nA generic worker for task cluster, written in go.\r\n\r\n# Install binary\r\n\r\n* Download the latest release for your platform from https://github.com/taskcluster/generic-worker/releases\r\n* Download the latest release of livelog for your platform from https://github.com/taskcluster/livelog/releases\r\n* For darwin/linux, make the binaries executable: `chmod a+x {generic-worker,livelog}*`\r\n\r\n# Build from source\r\n\r\nIf you prefer not to use a prepackaged binary, or want to have the latest unreleased version from the development head:\r\n\r\n* Head over to http://golang.org/doc/install and follow the instructions for your platform. Be sure to set your GOPATH to something appropriate.\r\n* Run `go get github.com/taskcluster/generic-worker`\r\n* Run `go get github.com/taskcluster/livelog`\r\n\r\nAll being well, the binaries will be built under `${GOPATH}/bin`.\r\n\r\n# Create TaskCluster account\r\n\r\nHead over to https://tools.taskcluster.net/auth/clients/ and create yourself a clientId with permanent credentials. Then go to https://tools.taskcluster.net/auth/roles/ and create a role called `client-id:<your-client-id>` and give it the scope `worker-developer`. Keep a note of your clientId and accessToken.\r\n\r\n# Set up your env\r\n\r\nView the generic worker help, to see what config you need to set up:\r\n\r\n```\r\ngeneric-worker --help\r\n```\r\n\r\nThis should display something like this:\r\n\r\n```\r\ngeneric-worker\r\ngeneric-worker is a taskcluster worker that can run on any platform that supports go (golang).\r\nSee http://taskcluster.github.io/generic-worker/ for more details. Essentially, the worker is\r\nthe taskcluster component that executes tasks. It requests tasks from the taskcluster queue,\r\nand reports back results to the queue.\r\n\r\n  Usage:\r\n    generic-worker run                     [--config         CONFIG-FILE]\r\n                                           [--configure-for-aws]\r\n    generic-worker install                 [--config         CONFIG-FILE]\r\n                                           [--nssm           NSSM-EXE]\r\n                                           [--password       PASSWORD]\r\n                                           [--service-name   SERVICE-NAME]\r\n                                           [--username       USERNAME]\r\n    generic-worker show-payload-schema\r\n    generic-worker --help\r\n    generic-worker --version\r\n\r\n  Targets:\r\n    run                                     Runs the generic-worker in an infinite loop.\r\n    show-payload-schema                     Each taskcluster task defines a payload to be\r\n                                            interpreted by the worker that executes it. This\r\n                                            payload is validated against a json schema baked\r\n                                            into the release. This option outputs the json\r\n                                            schema used in this version of the generic\r\n                                            worker.\r\n    install                                 This will install the generic worker as a\r\n                                            Windows service. If the Windows user USERNAME\r\n                                            does not already exist on the system, the user\r\n                                            will be created. This user will be used to run\r\n                                            the service.\r\n\r\n  Options:\r\n    --configure-for-aws                     This will create the CONFIG-FILE for an AWS\r\n                                            installation by querying the AWS environment\r\n                                            and setting appropriate values.\r\n    --config CONFIG-FILE                    Json configuration file to use. See\r\n                                            configuration section below to see what this\r\n                                            file should contain.\r\n                                            [default: generic-worker.config]\r\n    --help                                  Display this help text.\r\n    --nssm NSSM-EXE                         The full path to nssm.exe to use for\r\n                                            installing the service.\r\n                                            [default: C:\\nssm-2.24\\win64\\nssm.exe]\r\n    --password PASSWORD                     The password for the username specified\r\n                                            with -u|--username option. If not specified\r\n                                            a random password will be generated.\r\n    --service-name SERVICE-NAME             The name that the Windows service should be\r\n                                            installed under. [default: Generic Worker]\r\n    --username USERNAME                     The Windows user to run the generic worker\r\n                                            Windows service as. If the user does not\r\n                                            already exist on the system, it will be\r\n                                            created. [default: GenericWorker]\r\n    --version                               The release version of the generic-worker.\r\n\r\n\r\n  Configuring the generic worker:\r\n\r\n    The configuration file for the generic worker is specified with -c|--config CONFIG-FILE\r\n    as described above. Its format is a json dictionary of name/value pairs.\r\n\r\n        ** REQUIRED ** properties\r\n        =========================\r\n\r\n          access_token                      Taskcluster access token used by generic worker\r\n                                            to talk to taskcluster queue.\r\n          client_id                         Taskcluster client id used by generic worker to\r\n                                            talk to taskcluster queue.\r\n          worker_group                      Typically this would be an aws region - an\r\n                                            identifier to uniquely identify which pool of\r\n                                            workers this worker logically belongs to.\r\n          worker_id                         A name to uniquely identify your worker.\r\n          worker_type                       This should match a worker_type managed by the\r\n                                            provisioner you have specified.\r\n          livelog_secret                    This should match the secret used by the\r\n                                            stateless dns server; see\r\n                                            https://github.com/taskcluster/stateless-dns-server\r\n          public_ip                         The IP address for clients to be directed to\r\n                                            for serving live logs; see\r\n                                            https://github.com/taskcluster/livelog and\r\n                                            https://github.com/taskcluster/stateless-dns-server\r\n\r\n        ** OPTIONAL ** properties\r\n        =========================\r\n\r\n          certificate                       Taskcluster certificate, when using temporary\r\n                                            credentials only.\r\n          provisioner_id                    The taskcluster provisioner which is taking care\r\n                                            of provisioning environments with generic-worker\r\n                                            running on them. [default: aws-provisioner-v1]\r\n          refresh_urls_prematurely_secs     The number of seconds before azure urls expire,\r\n                                            that the generic worker should refresh them.\r\n                                            [default: 310]\r\n          debug                             Logging filter; see\r\n                                            https://github.com/tj/go-debug [default: *]\r\n          livelog_executable                Filepath of LiveLog executable to use; see\r\n                                            https://github.com/taskcluster/livelog\r\n          subdomain                         Subdomain to use in stateless dns name for live\r\n                                            logs; see\r\n                                            https://github.com/taskcluster/stateless-dns-server\r\n                                            [default: taskcluster-worker.net]\r\n\r\n    Here is an syntactically valid example configuration file:\r\n\r\n            {\r\n              \"access_token\":               \"123bn234bjhgdsjhg234\",\r\n              \"client_id\":                  \"hskdjhfasjhdkhdbfoisjd\",\r\n              \"worker_group\":               \"dev-test\",\r\n              \"worker_id\":                  \"IP_10-134-54-89\",\r\n              \"worker_type\":                \"win2008-worker\",\r\n              \"provisioner_id\":             \"my-provisioner\",\r\n              \"livelog_secret\":             \"baNaNa-SouP4tEa\",\r\n              \"public_ip\":                  \"12.24.35.46\"\r\n            }\r\n\r\n\r\n    If an optional config setting is not provided in the json configuration file, the\r\n    default will be taken (defaults documented above).\r\n\r\n    If no value can be determined for a required config setting, the generic-worker will\r\n    exit with a failure message.\r\n```\r\n\r\n# Start the generic worker\r\n\r\nSimply run:\r\n\r\n```\r\ngeneric-worker --config CONFIG-FILE\r\n```\r\n\r\nand watch logs for a successful startup. If you can see it is polling the Queue, and the process does not exit, then you can continue. If it reports a problem, follow any instructions it provides. If you are really stuck, join #taskcluster channel on irc.mozilla.org, and ask for help.\r\n\r\nIt should look something like this:\r\n\r\n```\r\n21:22:28.016 4ms    4ms    generic-worker - Detected darwin platform\r\n21:22:28.016 5ms    5ms    queue - Making http request: &{GET https://queue.taskcluster.net/v1/poll-task-url/test-provisioner/IKS0ndoITKKaRfytmhmn7A HTTP/1.1 1 1 map[Content-Type:[application/json] Authorization:[Hawk id=\"hkhwW8sQRFiau1ie1b29tQ\", mac=\"9fb6kOZFnPPkGlLFFUdkYlVQn2DMVnF+vEZRQXj2tZY=\", ts=\"1449264148\", nonce=\"zn2CRy0e\"]] <nil> 0 [] false queue.taskcluster.net map[] map[] <nil> map[]   <nil> <nil>}\r\n21:22:29.261 1s     1s     generic-worker - Refreshing signed urls in 24m49.966236028s\r\n21:22:29.261 3us    3us    generic-worker -   Priority (1) Delete URL: https://taskclusterqueuev1.queue.core.windows.net/queue-cnvdrxdarepvm5abnzfwx5ek-cgajs77bixgp6ckx67cditsd-5/messages/{{messageId}}?popreceipt={{popReceipt}}&sv=2015-04-05&se=2015-12-04T21%3A52%3A29Z&sp=p&spr=https&sig=F0pBtAwEU7GKUPVgv9a0ztKTUv%2FEWGGnttQkGaNzHq8%3D&st=2015-12-04T21%3A07%3A29Z\r\n21:22:29.261 889ns  879ns  generic-worker -   Priority (1) Poll URL:   https://taskclusterqueuev1.queue.core.windows.net/queue-cnvdrxdarepvm5abnzfwx5ek-cgajs77bixgp6ckx67cditsd-5/messages?visibilitytimeout=300&sv=2015-04-05&se=2015-12-04T21%3A52%3A29Z&sp=p&spr=https&sig=F0pBtAwEU7GKUPVgv9a0ztKTUv%2FEWGGnttQkGaNzHq8%3D&st=2015-12-04T21%3A07%3A29Z\r\n21:22:29.261 791ns  781ns  generic-worker -   Priority (2) Delete URL: https://taskclusterqueuev1.queue.core.windows.net/queue-cnvdrxdarepvm5abnzfwx5ek-cgajs77bixgp6ckx67cditsd-1/messages/{{messageId}}?popreceipt={{popReceipt}}&sv=2015-04-05&se=2015-12-04T21%3A52%3A29Z&sp=p&spr=https&sig=dMIZ6%2FyVhl5FaOxSXthdQV7VIGlr3IA0QrffTr5%2B0vw%3D&st=2015-12-04T21%3A07%3A29Z\r\n21:22:29.261 722ns  712ns  generic-worker -   Priority (2) Poll URL:   https://taskclusterqueuev1.queue.core.windows.net/queue-cnvdrxdarepvm5abnzfwx5ek-cgajs77bixgp6ckx67cditsd-1/messages?visibilitytimeout=300&sv=2015-04-05&se=2015-12-04T21%3A52%3A29Z&sp=p&spr=https&sig=dMIZ6%2FyVhl5FaOxSXthdQV7VIGlr3IA0QrffTr5%2B0vw%3D&st=2015-12-04T21%3A07%3A29Z\r\n2015/12/04 22:22:30 Binding queue/pmoore_test1/44889277-c3f6-4f23-936c-c5a338cf0592 to exchange/taskcluster-queue/v1/artifact-created with routing key *.d9vbIkBAS_-9MAEdE9zbJw.*.*.*.test-provisioner.IKS0ndoITKKaRfytmhmn7A.*.*.#\r\n2015/12/04 22:22:30 Binding queue/pmoore_test1/44889277-c3f6-4f23-936c-c5a338cf0592 to exchange/taskcluster-queue/v1/task-completed with routing key *.d9vbIkBAS_-9MAEdE9zbJw.*.*.*.test-provisioner.IKS0ndoITKKaRfytmhmn7A.*.*.#\r\n21:22:30.488 1s     1s     generic-worker - Zero tasks returned in Azure XML QueueMessagesList\r\n21:22:30.678 189ms  189ms  generic-worker - Zero tasks returned in Azure XML QueueMessagesList\r\n21:22:30.678 1us    1us    generic-worker - No task claimed from any Azure queue...\r\n21:22:30.876 197ms  197ms  generic-worker - Zero tasks returned in Azure XML QueueMessagesList\r\n21:22:31.065 189ms  189ms  generic-worker - Zero tasks returned in Azure XML QueueMessagesList\r\n21:22:31.065 1us    1us    generic-worker - No task claimed from any Azure queue...\r\n```\r\n\r\n# Create a test job\r\n\r\nGo to https://tools.taskcluster.net/task-creator/ and create a task to run on your generic worker.\r\n\r\nUse [this example](task-definition-example.json) as a template, but make sure to edit `provisionerId` and `workerType` values so that they match what you set in your config file.\r\n\r\nPlease note you should *NOT* use the default value of `aws-provisioner` for the `provisionerId` since then the production aws provisioner may start spawning ec2 instances, and the docker-worker may try to run the job. By specifying something unique for your local environment, the aws provisioner and docker workers will leave this task alone, and only your machine will claim the task.\r\n\r\nDon't forget to submit the task by clicking the *Create Task* icon.\r\n\r\nIf all is well, your local generic worker should pick up the job you submit, run it, and report back status.\r\n\r\n# Run the generic worker test suite\r\n\r\nFor this you need to have the source files (you cannot run the tests from the binary package).\r\n\r\nThen cd into the source directory, and run:\r\n\r\n```\r\ngo test -v ./...\r\n```\r\n\r\n# Further information\r\n\r\nPlease see:\r\n\r\n* [TaskCluster Documentation](http://docs.taskcluster.net/)\r\n* [Generic Worker presentations](http://docs.taskcluster.net/presentations/) (focus on Windows platform)\r\n* [TaskCluster Web Tools] (http://tools.taskcluster.net/)\r\n* [Generic Worker Open Bugs] (https://bugzilla.mozilla.org/buglist.cgi?f1=product&list_id=12722874&o1=equals&query_based_on=Taskcluster%20last%202%20days&o2=equals&query_format=advanced&f2=component&v1=Taskcluster&v2=Generic-Worker&known_name=Taskcluster%20last%202%20days)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}